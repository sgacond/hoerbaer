#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <sys/unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_err.h"
#include "esp_log.h"
#include "esp_vfs_fat.h"
#include "driver/sdmmc_host.h"
#include "driver/sdspi_host.h"
#include "driver/i2s.h"
#include "driver/i2c.h"
#include "sdmmc_cmd.h"

static const char *TAG = "READWAVSDTEST";

#define PIN_NUM_MISO 19
#define PIN_NUM_MOSI 23
#define PIN_NUM_CLK  18
#define PIN_NUM_CS   5

#define I2S_NUM         (0)

// WAVE file header format
struct wave_header {
	char riff[4];						// RIFF string
	int overall_size;     				// overall size of file in bytes
	char wave[4];						// WAVE string
	char fmt_chunk_marker[4];			// fmt string with trailing null char
	int length_of_fmt;					// length of the format data
	short format_type;					// format type. 1-PCM, 3- IEEE float, 6 - 8bit A law, 7 - 8bit mu law
	short channels;						// no.of channels
	int sample_rate;					// sampling rate (blocks per second)
	int byterate;						// SampleRate * NumChannels * BitsPerSample/8
	short block_align;					// NumChannels * BitsPerSample/8
	short bits_per_sample;				// bits per sample, 8- 8bits, 16- 16 bits etc
};

struct data_chunk_header {
    char data_chunk_header [4];		// DATA string or FLLR string
	int data_size;						// NumSamples * NumChannels * BitsPerSample/8 - size of the next chunk that will be read
};

void init_sd_card() 
{
    ESP_LOGI(TAG, "Initializing SD card");

    ESP_LOGI(TAG, "Using SPI peripheral");

    sdmmc_host_t host = SDSPI_HOST_DEFAULT();
    sdspi_slot_config_t slot_config = SDSPI_SLOT_CONFIG_DEFAULT();
    slot_config.gpio_miso = PIN_NUM_MISO;
    slot_config.gpio_mosi = PIN_NUM_MOSI;
    slot_config.gpio_sck  = PIN_NUM_CLK;
    slot_config.gpio_cs   = PIN_NUM_CS;
    // This initializes the slot without card detect (CD) and write protect (WP) signals.
    // Modify slot_config.gpio_cd and slot_config.gpio_wp if your board has these signals.

    // Options for mounting the filesystem.
    // If format_if_mount_failed is set to true, SD card will be partitioned and
    // formatted in case when mounting fails.
    esp_vfs_fat_sdmmc_mount_config_t mount_config = {
        .format_if_mount_failed = false,
        .max_files = 5,
        .allocation_unit_size = 16 * 1024
    };

    // Use settings defined above to initialize SD card and mount FAT filesystem.
    // Note: esp_vfs_fat_sdmmc_mount is an all-in-one convenience function.
    // Please check its source code and implement error recovery when developing
    // production applications.
    sdmmc_card_t* card;
    esp_err_t ret = esp_vfs_fat_sdmmc_mount("/sdcard", &host, &slot_config, &mount_config, &card);

    if (ret != ESP_OK) {
        if (ret == ESP_FAIL) {
            ESP_LOGE(TAG, "Failed to mount filesystem. "
                "If you want the card to be formatted, set format_if_mount_failed = true.");
        } else {
            ESP_LOGE(TAG, "Failed to initialize the card (%s). "
                "Make sure SD card lines have pull-up resistors in place.", esp_err_to_name(ret));
        }
        return;
    }

    // Card has been initialized, print its properties
    sdmmc_card_print_info(stdout, card);
}

void init_i2s(int sample_rate, int bits)
{
    printf("INIT I2S, %d / %d bits", sample_rate, bits);

    //for 36Khz sample rates, we create 100Hz sine wave, every cycle need 36000/100 = 360 samples (4-bytes or 8-bytes each sample)
    //depend on bits_per_sample
    //using 6 buffers, we need 60-samples per buffer
    //if 2-channels, 16-bit each channel, total buffer is 360*4 = 1440 bytes
    //if 2-channels, 24/32-bit each channel, total buffer is 360*8 = 2880 bytes
    i2s_config_t i2s_config = {
        .mode = I2S_MODE_MASTER | I2S_MODE_TX,                                  // Only TX
        .sample_rate = sample_rate,
        .bits_per_sample = bits,
        .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,                           //2-channels
        .communication_format = I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB,
        .dma_buf_count = 6,
        .dma_buf_len = 60,
        .use_apll = true,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1                                //Interrupt level 1
    };
    
    i2s_pin_config_t pin_config = {
        .bck_io_num = 26,
        .ws_io_num = 25,
        .data_out_num = 27, //22,
        .data_in_num = -1                                                       //Not used
    };

    i2s_driver_install(I2S_NUM, &i2s_config, 0, NULL);
    i2s_set_pin(I2S_NUM, &pin_config);

    // MCLK OUTPUT ON PIN 1 (DIRECT FROM I2S_0)
    // https://esp32.com/viewtopic.php?f=5&t=1585&start=10
    REG_WRITE(PIN_CTRL, 0b111111110000);
    PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0_CLK_OUT1);
}

void read_header(FILE* f, struct wave_header* header)
{
    // read header parts
    fread(header, sizeof(*header), 1, f);

    printf("(5-8) Overall size: bytes:%u, Kb:%u \n", header->overall_size, header->overall_size/1024);
    printf("(9-12) Wave marker: %s\n", header->wave);
    printf("(13-16) Fmt marker: %s\n", header->fmt_chunk_marker);
    printf("(17-20) Length of Fmt header: %u \n", header->length_of_fmt);
    printf("(21-22) Format type: %u \n", header->format_type);
    printf("(23-24) Channels: %u \n", header->channels);
    printf("(25-28) Sample rate: %u\n", header->sample_rate);
    printf("(29-32) Byte Rate: %u , Bit Rate:%u\n", header->byterate, header->byterate*8);
    printf("(33-34) Block Alignment: %u \n", header->block_align);
    printf("(35-36) Bits per sample: %u \n", header->bits_per_sample);

    long size_of_each_sample = (header->channels * header->bits_per_sample) / 8;
    printf("Size of each sample:%ld bytes\n", size_of_each_sample);

    float duration_in_seconds = (float) header->overall_size / header->byterate;
    printf("Approx.Duration in seconds=%f\n", duration_in_seconds);
}

void read_data_chunk_header(FILE* f, struct data_chunk_header* chunk_header)
{
    fread(chunk_header, sizeof(*chunk_header), 1, f);

    printf("(CHUNK) Data Marker: %.*s \n", 4, chunk_header->data_chunk_header);
    printf("(CHUNK) Size of data chunk: %u \n", chunk_header->data_size);
}

void init_i2c() 
{
    i2c_config_t conf;
    conf.mode = I2C_MODE_MASTER;
    conf.sda_io_num = 21;
    conf.sda_pullup_en = GPIO_PULLUP_ENABLE;
    conf.scl_io_num = 22;
    conf.scl_pullup_en = GPIO_PULLUP_ENABLE;
    conf.master.clk_speed = 100000;
    i2c_param_config(I2C_NUM_0, &conf);
    i2c_driver_install(I2C_NUM_0, conf.mode, 0, 0, 0);
}

void write_volume() 
{
    uint8_t addr = 0x4B;
    uint8_t vol = 28;

    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, addr << 1 | I2C_MASTER_WRITE, 0x1);
    i2c_master_write_byte(cmd, vol, 0x1);
    i2c_master_stop(cmd);

    esp_err_t ret = i2c_master_cmd_begin(I2C_NUM_0, cmd, 1000 / portTICK_RATE_MS);

    i2c_cmd_link_delete(cmd);

    if(ret != ESP_OK) {
        ESP_LOGE(TAG, "Error while writing volume: %s", esp_err_to_name(ret));
        return;
    }

    printf("WRITTEN VOLUME: %u", vol);
}

void app_main(void)
{
    init_i2c();
    write_volume();

    init_sd_card();

    // Open renamed file for reading
    ESP_LOGI(TAG, "Reading file");
    FILE* f = fopen("/sdcard/2.WAV", "r");
    if (f == NULL) {
        ESP_LOGE(TAG, "Failed to open file for reading");
        return;
    }

    struct wave_header *header = malloc(sizeof(*header));
    read_header(f, header);

    init_i2s(header->sample_rate, header->bits_per_sample);

    int offset = 36;
    while(offset < header->overall_size)
    {
        printf("SEEK TO OFFSET: %d \n", offset);
        fseek(f, offset, SEEK_SET);

        struct data_chunk_header *chunk_header = malloc(sizeof(*chunk_header));
        read_data_chunk_header(f, chunk_header);
        offset += sizeof(*chunk_header);
        fseek(f, offset, SEEK_SET);

        if(strncmp(chunk_header->data_chunk_header, "data", 4) == 0)
        {
            printf("play chunk, %.*s, length %d \n", 4, chunk_header->data_chunk_header, chunk_header->data_size);

            int buffer_size = 1440;
            unsigned short *buffer = malloc(buffer_size);
            size_t i2s_bytes_written = 0;

            while(offset < chunk_header->data_size)
            {
                fread(buffer, buffer_size, 1, f);
                i2s_write(I2S_NUM, buffer, buffer_size, &i2s_bytes_written, 100);

                // delay time: 44100 samples per seconds, 1440 / 2 / 2 = 360 samples written, ca 8ms
                vTaskDelay(8/portTICK_RATE_MS);

                offset += buffer_size;
                fseek(f, offset, SEEK_SET);
            }

            free(buffer);
        }
        else 
        {
            printf("skip chunk, %.*s, length %d \n", 4, chunk_header->data_chunk_header, chunk_header->data_size);
            offset += chunk_header->data_size;
        }
    }

    free(header);
    fclose(f);

    // All done, unmount partition and disable SDMMC or SPI peripheral
    esp_vfs_fat_sdmmc_unmount();
    ESP_LOGI(TAG, "Card unmounted");
}